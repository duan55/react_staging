{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u9648\\u9E3F\\u68EE\\\\Desktop\\\\react_staging\\\\src\\\\App.jsx\";\nimport React, { Component } from 'react';\nimport './App.css';\nimport Header from './components/Header';\nimport List from './components/List';\nimport Footer from './components/Footer';\n\n//修改了class -> className && style=\"\" -> style={{}}\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends Component {\n  constructor(...args) {\n    super(...args);\n    //状态在哪里，操作状态的方法就在哪里\n    //初始化状态\n    this.state = {\n      todos: [{\n        id: 1,\n        text: '吃饭',\n        done: true\n      }, {\n        id: 2,\n        text: '睡觉',\n        done: false\n      }, {\n        id: 3,\n        text: '写代码',\n        done: false\n      }]\n    };\n    //用于接受子组件Header传递的todo对象\n    this.addTodo = todoObj => {\n      //子组件调用也还是父组件的this\n      console.log(this.state);\n      //获取原todos\n      const {\n        todos\n      } = this.state;\n      //将新todo对象添加到todos数组的最前方\n      const newTodos = [todoObj, ...todos];\n      //更新状态\n      this.setState({\n        todos: newTodos\n      });\n    };\n    //Item组件更新done状态，需要App组件先传递给Item的父组件List，再由List传递给Item\n    this.updateTodo = (id, newDone) => {\n      //获取状态中的todos\n      const {\n        todos\n      } = this.state;\n      //遍历todos数组，找到对应id的todo对象，更新done属性\n      const newTodos = todos.map(todoObj => {\n        if (todoObj.id === id) return {\n          ...todoObj,\n          done: newDone\n        };else return todoObj;\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n    this.deleteTodo = id => {\n      //获取状态中的todos\n      const {\n        todos\n      } = this.state;\n      //遍历todos数组，过滤删除对应的done对象\n      const newTodos = todos.filter(todoObj => {\n        //当id不同的场合才会被保留，否则被删除\n        return todoObj.id !== id;\n      });\n      this.setState({\n        todos: newTodos\n      });\n    };\n    this.checkAll = () => {\n      const {\n        todos\n      } = this.state;\n    };\n  }\n  render() {\n    const {\n      todos\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-container\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"todo-wrap\",\n        children: [/*#__PURE__*/_jsxDEV(Header, {\n          addTodo: this.addTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(List, {\n          todos: todos,\n          updateTodo: this.updateTodo,\n          deleteTodo: this.deleteTodo\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 68,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Footer, {\n          todos: todos\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 13\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","Header","List","Footer","jsxDEV","_jsxDEV","App","constructor","args","state","todos","id","text","done","addTodo","todoObj","console","log","newTodos","setState","updateTodo","newDone","map","deleteTodo","filter","checkAll","render","className","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/陈鸿森/Desktop/react_staging/src/App.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport './App.css'\r\nimport Header from './components/Header'\r\nimport List from './components/List'\r\nimport Footer from './components/Footer'\r\n\r\n//修改了class -> className && style=\"\" -> style={{}}\r\nexport default class App extends Component {\r\n    //状态在哪里，操作状态的方法就在哪里\r\n\r\n    //初始化状态\r\n    state = {\r\n        todos: [\r\n            { id: 1, text: '吃饭', done: true },\r\n            { id: 2, text: '睡觉', done: false },\r\n            { id: 3, text: '写代码', done: false }\r\n        ]\r\n    }\r\n\r\n    //用于接受子组件Header传递的todo对象\r\n    addTodo = (todoObj) => {\r\n        //子组件调用也还是父组件的this\r\n        console.log(this.state)\r\n        //获取原todos\r\n        const { todos } = this.state\r\n        //将新todo对象添加到todos数组的最前方\r\n        const newTodos = [todoObj, ...todos]\r\n        //更新状态\r\n        this.setState({ todos: newTodos })\r\n    }\r\n\r\n    //Item组件更新done状态，需要App组件先传递给Item的父组件List，再由List传递给Item\r\n    updateTodo = (id, newDone) => {\r\n        //获取状态中的todos\r\n        const { todos } = this.state\r\n        //遍历todos数组，找到对应id的todo对象，更新done属性\r\n        const newTodos = todos.map((todoObj) => {\r\n            if (todoObj.id === id) return { ...todoObj, done: newDone }\r\n            else return todoObj\r\n        })\r\n        this.setState({ todos: newTodos })\r\n    }\r\n\r\n    deleteTodo = (id) => {\r\n        //获取状态中的todos\r\n        const { todos } = this.state\r\n        //遍历todos数组，过滤删除对应的done对象\r\n        const newTodos = todos.filter((todoObj) => {\r\n            //当id不同的场合才会被保留，否则被删除\r\n            return (todoObj.id !== id) \r\n        })\r\n        this.setState({ todos: newTodos })\r\n    }\r\n\r\n    checkAll = () => {\r\n        const { todos } = this.state\r\n        \r\n    }\r\n\r\n    render() {\r\n        const { todos } = this.state\r\n        return (\r\n            <div className=\"todo-container\">\r\n                <div className=\"todo-wrap\">\r\n\r\n                    <Header addTodo={this.addTodo} />\r\n\r\n                    <List todos={todos} updateTodo={this.updateTodo} deleteTodo={this.deleteTodo} />\r\n\r\n                    <Footer todos={todos}/>\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}