{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u9648\\u9E3F\\u68EE\\\\Desktop\\\\react_staging\\\\src\\\\components\\\\Header\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { nanoid } from 'nanoid';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Header extends Component {\n  constructor(...args) {\n    super(...args);\n    //键盘按键事件的回调函数\n    this.handleKeyUp = event => {\n      //获取按下的键是哪一个,event.keyCode是按键的ASCII码已经要被废除了\n      // console.log(event.target.value, event.keyCode)\n      // console.log(event.target.value, event.key)\n      //解构赋值获取按下的key和输入的target\n      const {\n        key,\n        target\n      } = event;\n      //检测到'回车'\n      if (key === 'Enter') {\n        //去完空格之后如果无实质内容则报错提示\n        if (target.value.trim() === '') {\n          alert('输入不能为空');\n          return;\n        }\n        //封装todo对象,id使用nanoid(uuid生成)\n        const todoObj = {\n          id: nanoid(),\n          text: target.value,\n          done: false\n        };\n        this.props.addTodo(todoObj);\n        //清空输入框\n        target.value = '';\n      }\n      //现在需要将Header的值传递给App，更新其todos从而使得List中的Item  得到更新\n      //子组件想要给父组件传值，需要父组件给子组件一个回调函数，然后在子组件的事件中调用该回调函数，将值传给父组件\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"todo-header\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        onKeyUp: this.handleKeyUp,\n        type: \"text\",\n        placeholder: \"\\u8BF7\\u8F93\\u5165\\u4F60\\u7684\\u4EFB\\u52A1\\u540D\\u79F0\\uFF0C\\u6309\\u56DE\\u8F66\\u952E\\u786E\\u8BA4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  }\n}\n//对接收的props进行: 类型 & 必要性的限制\nHeader.propTypes = {\n  //限制{addTodo}为一个[必传]的[函数]\n  addTodo: PropTypes.func.isRequired\n};","map":{"version":3,"names":["React","Component","PropTypes","nanoid","jsxDEV","_jsxDEV","Header","constructor","args","handleKeyUp","event","key","target","value","trim","alert","todoObj","id","text","done","props","addTodo","render","className","children","onKeyUp","type","placeholder","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","func","isRequired"],"sources":["C:/Users/陈鸿森/Desktop/react_staging/src/components/Header/index.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {nanoid} from 'nanoid'\r\nimport './index.css'\r\n\r\nexport default class Header extends Component {\r\n\r\n  //对接收的props进行: 类型 & 必要性的限制\r\n  static propTypes = {\r\n    //限制{addTodo}为一个[必传]的[函数]\r\n    addTodo: PropTypes.func.isRequired\r\n  }\r\n\r\n  //键盘按键事件的回调函数\r\n  handleKeyUp = (event) => {\r\n    //获取按下的键是哪一个,event.keyCode是按键的ASCII码已经要被废除了\r\n    // console.log(event.target.value, event.keyCode)\r\n    // console.log(event.target.value, event.key)\r\n    //解构赋值获取按下的key和输入的target\r\n    const { key,target } = event\r\n    //检测到'回车'\r\n    if (key === 'Enter') {\r\n      //去完空格之后如果无实质内容则报错提示\r\n      if(target.value.trim() === ''){\r\n        alert('输入不能为空')\r\n        return;\r\n      }\r\n        //封装todo对象,id使用nanoid(uuid生成)\r\n        const todoObj = {id:nanoid(),text:target.value,done:false}  \r\n        this.props.addTodo(todoObj)\r\n        //清空输入框\r\n        target.value = ''\r\n    }\r\n    //现在需要将Header的值传递给App，更新其todos从而使得List中的Item  得到更新\r\n    //子组件想要给父组件传值，需要父组件给子组件一个回调函数，然后在子组件的事件中调用该回调函数，将值传给父组件\r\n  }\r\n\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"todo-header\">\r\n        <input onKeyUp={this.handleKeyUp} type=\"text\" placeholder=\"请输入你的任务名称，按回车键确认\" />\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,SAAQC,MAAM,QAAO,QAAQ;AAC7B,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,eAAe,MAAMC,MAAM,SAASL,SAAS,CAAC;EAAAM,YAAA,GAAAC,IAAA;IAAA,SAAAA,IAAA;IAQ5C;IAAA,KACAC,WAAW,GAAIC,KAAK,IAAK;MACvB;MACA;MACA;MACA;MACA,MAAM;QAAEC,GAAG;QAACC;MAAO,CAAC,GAAGF,KAAK;MAC5B;MACA,IAAIC,GAAG,KAAK,OAAO,EAAE;QACnB;QACA,IAAGC,MAAM,CAACC,KAAK,CAACC,IAAI,CAAC,CAAC,KAAK,EAAE,EAAC;UAC5BC,KAAK,CAAC,QAAQ,CAAC;UACf;QACF;QACE;QACA,MAAMC,OAAO,GAAG;UAACC,EAAE,EAACd,MAAM,CAAC,CAAC;UAACe,IAAI,EAACN,MAAM,CAACC,KAAK;UAACM,IAAI,EAAC;QAAK,CAAC;QAC1D,IAAI,CAACC,KAAK,CAACC,OAAO,CAACL,OAAO,CAAC;QAC3B;QACAJ,MAAM,CAACC,KAAK,GAAG,EAAE;MACrB;MACA;MACA;IACF,CAAC;EAAA;EAGDS,MAAMA,CAAA,EAAG;IACP,oBACEjB,OAAA;MAAKkB,SAAS,EAAC,aAAa;MAAAC,QAAA,eAC1BnB,OAAA;QAAOoB,OAAO,EAAE,IAAI,CAAChB,WAAY;QAACiB,IAAI,EAAC,MAAM;QAACC,WAAW,EAAC;MAAkB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5E,CAAC;EAEV;AACF;AAtCE;AAFmBzB,MAAM,CAGlB0B,SAAS,GAAG;EACjB;EACAX,OAAO,EAAEnB,SAAS,CAAC+B,IAAI,CAACC;AAC1B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}