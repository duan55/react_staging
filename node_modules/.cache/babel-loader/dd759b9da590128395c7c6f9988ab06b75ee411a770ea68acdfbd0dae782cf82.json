{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u9648\\u9E3F\\u68EE\\\\Desktop\\\\react_staging\\\\src\\\\pages\\\\Home\\\\Message\\\\Detail\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport qs from 'qs';\n\n//本来这一步应该是要向服务器询问获取的\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst data = [{\n  id: '1',\n  content: '憔悴不堪的心 游移不定的眼神'\n}, {\n  id: '2',\n  content: '整个世界 独留我孤身一人'\n}, {\n  id: '3',\n  content: '只知一味凋零的春日 每年冷漠地附和着我'\n}];\nexport default class Detail extends Component {\n  render() {\n    console.log(this.props);\n    //（1）接收到的params参数被传入到了match对象中的params属性中\n    const {\n      id,\n      title\n    } = this.props.match.params;\n\n    //（2）接收search参数被传入到了location对象中的search属性中（但是其形式非常抽象: '?id=1&title=cry1'）\n    // const {search} = this.props.location\n    // const {id, title} = qs.parse(search.slice(1)) // 去掉?号\n    // 使用 slice(1) 这个方法来去掉查询字符串开头的问号（?）。因此，如果 search 是 ?id=1&title=cry1，那么 search.slice(1) 会返回 id=1&title=cry1 这样做是为了准备解析成对象\n    // const {id, title} = qs.parse(search, {ignoreQueryPrefix: true})\n\n    //（3）接收state参数 防止用户清空浏览器记录导致数据全丢失的情况下，需要熔断处理使用{}作为默认值\n    // const {id,title} = this.props.location.state || {}\n\n    const findResult = data.find(item => {\n      return item.id === id;\n    }) || {}; // 当id为undefined时熔断\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: [/*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"id:\", id]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"title:\", title]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"li\", {\n          children: [\"content:\", findResult.content]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 7\n    }, this);\n  }\n}","map":{"version":3,"names":["React","Component","qs","jsxDEV","_jsxDEV","data","id","content","Detail","render","console","log","props","title","match","params","findResult","find","item","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["C:/Users/陈鸿森/Desktop/react_staging/src/pages/Home/Message/Detail/index.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport qs from 'qs'\r\n\r\n//本来这一步应该是要向服务器询问获取的\r\nconst data = [\r\n  { id: '1', content: '憔悴不堪的心 游移不定的眼神' },\r\n  { id: '2', content: '整个世界 独留我孤身一人' },\r\n  { id: '3', content: '只知一味凋零的春日 每年冷漠地附和着我' }\r\n]\r\n\r\nexport default class Detail extends Component {\r\n  render() {\r\n    console.log(this.props)\r\n    //（1）接收到的params参数被传入到了match对象中的params属性中\r\n    const {id,title} = this.props.match.params \r\n\r\n    //（2）接收search参数被传入到了location对象中的search属性中（但是其形式非常抽象: '?id=1&title=cry1'）\r\n    // const {search} = this.props.location\r\n    // const {id, title} = qs.parse(search.slice(1)) // 去掉?号\r\n    // 使用 slice(1) 这个方法来去掉查询字符串开头的问号（?）。因此，如果 search 是 ?id=1&title=cry1，那么 search.slice(1) 会返回 id=1&title=cry1 这样做是为了准备解析成对象\r\n    // const {id, title} = qs.parse(search, {ignoreQueryPrefix: true})\r\n\r\n    //（3）接收state参数 防止用户清空浏览器记录导致数据全丢失的情况下，需要熔断处理使用{}作为默认值\r\n    // const {id,title} = this.props.location.state || {}\r\n\r\n    const findResult = data.find((item) => {\r\n      return item.id === id\r\n    }) || {} // 当id为undefined时熔断\r\n    return (\r\n      <div>\r\n        <ul>\r\n          <li>id:{id}</li>\r\n          <li>title:{title}</li>\r\n          <li>content:{findResult.content}</li>\r\n        </ul>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,EAAE,MAAM,IAAI;;AAEnB;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,MAAMC,IAAI,GAAG,CACX;EAAEC,EAAE,EAAE,GAAG;EAAEC,OAAO,EAAE;AAAiB,CAAC,EACtC;EAAED,EAAE,EAAE,GAAG;EAAEC,OAAO,EAAE;AAAe,CAAC,EACpC;EAAED,EAAE,EAAE,GAAG;EAAEC,OAAO,EAAE;AAAsB,CAAC,CAC5C;AAED,eAAe,MAAMC,MAAM,SAASP,SAAS,CAAC;EAC5CQ,MAAMA,CAAA,EAAG;IACPC,OAAO,CAACC,GAAG,CAAC,IAAI,CAACC,KAAK,CAAC;IACvB;IACA,MAAM;MAACN,EAAE;MAACO;IAAK,CAAC,GAAG,IAAI,CAACD,KAAK,CAACE,KAAK,CAACC,MAAM;;IAE1C;IACA;IACA;IACA;IACA;;IAEA;IACA;;IAEA,MAAMC,UAAU,GAAGX,IAAI,CAACY,IAAI,CAAEC,IAAI,IAAK;MACrC,OAAOA,IAAI,CAACZ,EAAE,KAAKA,EAAE;IACvB,CAAC,CAAC,IAAI,CAAC,CAAC,EAAC;IACT,oBACEF,OAAA;MAAAe,QAAA,eACEf,OAAA;QAAAe,QAAA,gBACEf,OAAA;UAAAe,QAAA,GAAI,KAAG,EAACb,EAAE;QAAA;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eAChBnB,OAAA;UAAAe,QAAA,GAAI,QAAM,EAACN,KAAK;QAAA;UAAAO,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC,eACtBnB,OAAA;UAAAe,QAAA,GAAI,UAAQ,EAACH,UAAU,CAACT,OAAO;QAAA;UAAAa,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAK,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACnC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACF,CAAC;EAEV;AACF","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}