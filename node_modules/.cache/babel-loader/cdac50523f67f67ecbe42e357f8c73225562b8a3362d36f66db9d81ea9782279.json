{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\\\u9648\\u9E3F\\u68EE\\\\Desktop\\\\react_staging\\\\src\\\\components\\\\List\\\\index.jsx\";\nimport React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport Item from '../Item';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class List extends Component {\n  render() {\n    // 取出App父组件传递的todos数据\n    const {\n      todos,\n      updateTodo\n    } = this.props;\n    return /*#__PURE__*/_jsxDEV(\"ul\", {\n      className: \"todo-main\",\n      children: todos.map(todo => {\n        //需要传递key，尽量使用【唯一标识】而不是使用index\n        //批量传递todo数据，使用...todo {展开运算符}\n        //const {id,name,done} = todo 这叫解构赋值\n        //... 叫对象展开运算符、(展开)拓展运算符，展开可迭代对象的元素\n        return /*#__PURE__*/_jsxDEV(Item, {\n          ...todo,\n          updateTodo: updateTodo\n        }, todo.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 26,\n          columnNumber: 20\n        }, this);\n        // return <Item key={todo.id} id={todo.id} name={todo.name} done={todo.done}/>\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 7\n    }, this);\n  }\n}\n//对接收的props进行: 类型 & 必要性的限制\nList.propTypes = {\n  //限制{updateTodo}为一个[必传]的[函数]\n  todos: PropTypes.array.isRequired,\n  updateTodo: PropTypes.func.isRequired\n};","map":{"version":3,"names":["React","Component","PropTypes","Item","jsxDEV","_jsxDEV","List","render","todos","updateTodo","props","className","children","map","todo","id","fileName","_jsxFileName","lineNumber","columnNumber","propTypes","array","isRequired","func"],"sources":["C:/Users/陈鸿森/Desktop/react_staging/src/components/List/index.jsx"],"sourcesContent":["import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Item from '../Item'\r\nimport './index.css'\r\n\r\nexport default class List extends Component {\r\n\r\n    //对接收的props进行: 类型 & 必要性的限制\r\n    static propTypes = {\r\n      //限制{updateTodo}为一个[必传]的[函数]\r\n      todos: PropTypes.array.isRequired,\r\n      updateTodo: PropTypes.func.isRequired\r\n    }\r\n\r\n  render() {\r\n    // 取出App父组件传递的todos数据\r\n    const { todos, updateTodo } = this.props\r\n    return (\r\n      <ul className=\"todo-main\">\r\n        {\r\n          todos.map( (todo) =>{\r\n            //需要传递key，尽量使用【唯一标识】而不是使用index\r\n            //批量传递todo数据，使用...todo {展开运算符}\r\n            //const {id,name,done} = todo 这叫解构赋值\r\n            //... 叫对象展开运算符、(展开)拓展运算符，展开可迭代对象的元素\r\n            return <Item key={todo.id} {...todo} updateTodo={updateTodo} />\r\n            // return <Item key={todo.id} id={todo.id} name={todo.name} done={todo.done}/>\r\n          })\r\n        }\r\n      </ul>\r\n    )\r\n  }\r\n}\r\n"],"mappings":";AAAA,OAAOA,KAAK,IAAIC,SAAS,QAAQ,OAAO;AACxC,OAAOC,SAAS,MAAM,YAAY;AAClC,OAAOC,IAAI,MAAM,SAAS;AAC1B,OAAO,aAAa;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEpB,eAAe,MAAMC,IAAI,SAASL,SAAS,CAAC;EAS1CM,MAAMA,CAAA,EAAG;IACP;IACA,MAAM;MAAEC,KAAK;MAAEC;IAAW,CAAC,GAAG,IAAI,CAACC,KAAK;IACxC,oBACEL,OAAA;MAAIM,SAAS,EAAC,WAAW;MAAAC,QAAA,EAErBJ,KAAK,CAACK,GAAG,CAAGC,IAAI,IAAI;QAClB;QACA;QACA;QACA;QACA,oBAAOT,OAAA,CAACF,IAAI;UAAA,GAAmBW,IAAI;UAAEL,UAAU,EAAEA;QAAW,GAA1CK,IAAI,CAACC,EAAE;UAAAC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAqC,CAAC;QAC/D;MACF,CAAC;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAEF,CAAC;EAET;AACF;AAzBI;AAFiBb,IAAI,CAGdc,SAAS,GAAG;EACjB;EACAZ,KAAK,EAAEN,SAAS,CAACmB,KAAK,CAACC,UAAU;EACjCb,UAAU,EAAEP,SAAS,CAACqB,IAAI,CAACD;AAC7B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}